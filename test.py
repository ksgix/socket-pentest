import socket
import logging
import threading
import random
import requests

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Database of known ports and their purposes
PORT_DATABASE = {
    20: 'FTP',
    21: 'FTP',
    23: 'Telnet',
    69: 'TFTP',
    80: 'HTTP',
    161: 'SNMP',
    445: 'SMB',
    3306: 'MySQL',
    3389: 'RDP',
    5900: 'VNC',
    6379: 'Redis',
    8080: 'HTTP Proxy'
}

# Function to scan for open ports
def scan_ports(host, target_port=None):
    open_ports = []
    lock = threading.Lock()

    def scan_port(port):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((host, port))
        if result == 0:
            with lock:
                open_ports.append(port)
        sock.close()

    threads = []
    if target_port:
        thread = threading.Thread(target=scan_port, args=(target_port,))
        threads.append(thread)
        thread.start()
    else:
        for port in PORT_DATABASE:
            thread = threading.Thread(target=scan_port, args=(port,))
            threads.append(thread)
            thread.start()

    for thread in threads:
        thread.join()

    return open_ports

# Function to generate the security report
def generate_security_report(host, open_ports):
    report = f"Security Report for {host}\n\n"

    report += "Open Ports:\n"
    for port in open_ports:
        service = PORT_DATABASE.get(port, 'Unknown')
        report += f"Port {port}: {service}\n"

    return report

# Function to scan for IP addresses with a specific open port on the Internet
def scan_port_on_internet(port, max_ips):
    ip_list = []
    lock = threading.Lock()

    def scan_ip(ip):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((ip, port))
        if result == 0:
            with lock:
                ip_list.append(ip)
        sock.close()

    threads = []
    while len(ip_list) < max_ips:
        ip = generate_random_ip()
        thread = threading.Thread(target=scan_ip, args=(ip,))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    return ip_list

# Function to get the organization name for an IP address using ip-api.com
def get_organization(ip):
    try:
        response = requests.get(f"http://ip-api.com/json/{ip}?fields=org")
        data = response.json()
        return data["org"]
    except:
        return "Unknown"

# Function to generate a random IP address
def generate_random_ip():
    return ".".join(str(random.randint(0, 255)) for _ in range(4))

# Main function
def main():
    try:
        print("Choose an action:")
        print("1. Scan for open ports on a specified host")
        print("2. Search for IP addresses with an open port on the Internet")
        choice = input("Enter the action number (1 or 2): ")

        if choice == "1":
            host = input("Enter the IP address or domain name to scan: ")

            # Scan for open ports
            logging.info(f"Scanning for open ports on {host}...")
            open_ports = scan_ports(host)
            logging.info(f"Open ports: {open_ports}")

            # Generate the security report
            logging.info("Generating the security report...")
            security_report = generate_security_report(host, open_ports)

            # Save the report to a file
            report_filename = f"security_report_{host}.txt"
            with open(report_filename, 'w') as file:
                file.write(security_report)

            logging.info(f"Security report saved to file: {report_filename}")

            # Print the report to the console
            print("\nSecurity Report:")
            print(security_report)

        elif choice == "2":
            port = int(input("Enter the port to search: "))
            max_ips = int(input("Enter the maximum number of IP addresses to search for (up to 1000): "))

            if max_ips > 1000:
                print("Exceeded the maximum number of IP addresses (1000). Set to 1000.")
                max_ips = 1000

            logging.info(f"Scanning for IP addresses with open port {port} on the Internet...")
            ip_list = scan_port_on_internet(port, max_ips)
            logging.info(f"IP addresses with open port {port}: {ip_list}")

            # Save the results to a file
            result_filename = f"ip_list_port_{port}.txt"
            with open(result_filename, 'w') as file:
                for ip in ip_list:
                    organization = get_organization(ip)
                    file.write(f"{ip} - {organization}\n")

            logging.info(f"IP addresses and organizations saved to file: {result_filename}")

        else:
            print("Invalid choice. Please enter 1 or 2.")

    except KeyboardInterrupt:
        print("\nProgram interrupted by the user.")
    except Exception as e:
        logging.error(f"An error occurred: {str(e)}")

# Run the main function when the script is executed
if __name__ == '__main__':
    main()
